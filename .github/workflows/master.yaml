name: CI_master

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  REGISTRY: "registry.digitalocean.com/image-box"
  IMAGE_NAME: "authorization-service"
  CONTAINER_NAME: "authorization-service"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Set up Go 1.17
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test
        run: go test ./...

  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Build container image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          passphrase: ${{ secrets.PASSPHRASE }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME, DB_PORT, DB_USER, DB_PASSWORD, DB_DATABASE, DB_SSL_MODE, API_SERVER_PORT, TOKEN_SEC
          script: |
            # Login into Digital Ocean Registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} $(echo $REGISTRY)
            # Stop running container
            docker stop $(echo $CONTAINER_NAME)
            # Remove old container
            docker rm $(echo $CONTAINER_NAME)
            # Set env variables            
            export AUTH_SERVER_URL=${{ secrets.AUTH_SERVER_URL }}
            export HOST=${{ secrets.HOST }}
            export DB_PORT=${{ secrets.DB_PORT }}
            export DB_USER=${{ secrets.DB_USER }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_DATABASE=${{ secrets.DB_DATABASE }}
            export DB_SSL_MODE=${{ secrets.DB_SSL_MODE }}
            export API_SERVER_PORT=${{ secrets.API_SERVER_PORT }}
            export TOKEN_SEC=${{ secrets.TOKEN_SEC }}
            # Run a new container from a new image          
            docker run -e AUTH_SERVER_URL -e DB_PORT -e DB_USER -e DB_PASSWORD -e HOST -e DB_DATABASE \
            -e DB_SSL_MODE -e API_SERVER_PORT -d \
            --restart always --publish 82:8080 \
            --publish 90:8090 \
            --name $(echo $CONTAINER_NAME) \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)